package org.maths {	import org.maths.Complex;	import org.maths.Expression;		/**	 * Contains a list of commands implemented	 */	public class Commands {			private var name2Function:Object;				function Commands() {			// define command aliases			name2Function = {};						// assign a value to a variable identified by name			name2Function["assignValue"]={fn:assignValue, displayName:"="};			name2Function["="]={fn:assignValue, displayName:"="};		}				/**		 * Check whether a command is defined. 		 * It's more efficient to define commands in the name2Function table in order to avoid the try/catch		 * @param name Name of command		 * @return true if the named command exists		 */		public function hasCommand(name:String):Boolean {			if (name2Function[name] != null) {				return true;			}			/*			else try {				return this[name] is Function;			}			catch(err:Error) {}			*/			return false;		}				/**		 * Return the display name for a command 		 * It's more efficient to define commands in the name2Function table in order to avoid the try/catch		 * @param name Name of command		 * @return true if the named command exists		 */		public function displayName(name:String):String {			var o:Object;			if ((o = name2Function[name]) != null) {				return o.displayName;			}			/*			else try {				return this[name] is Function;			}			catch(err:Error) {}			*/			return null;		}						/**		 * Execute a defined command		 * @param cmdName Name of the command		 * @param varName the variable to which the command applies		 * @rvalue some expression passed as a parameter to the command		 * @return complex result		 */		public function executeCommand(cmdName:String, varName:String, rvalue:Expression):Complex {			if(this[cmdName] is Function) {				return this[cmdName].call(this, varName, rvalue);			}			return name2Function[cmdName].fn.call(this, varName, rvalue);		}				/**		 * Assigns an expression to a variable, defining the variable in the process		 * @param varName Name of variable		 * @param rvalue The expression to assign		 * @return The value of the assigned expression		 */		public function assignValue(varName:String, rvalue:Expression):Complex {			Expression.state.define(varName, rvalue);			return Expression.state.getValue(varName);		}	}}