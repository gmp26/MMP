package org.maths {import org.maths.Complex;public class SetValue {	private var members:Object;	private var ordering:Array;	private const EMPTY:Object = {};			function SetValue(members:Object=null) {		this.members = (members == null) ? EMPTY : members;				// put any initial members in alphabetical order		ordering = [];		for(var m:String in members) {			ordering.push(m);		}		ordering.sort();	}		public function isPrimitive():Boolean {		return false;	}		public function isExpression():Boolean {		return false;	}		public function isList():Boolean {		return true;	}		public function isEmpty():Boolean {		return members == null || members == {};	}		public function contains(z:Complex):Boolean {		return members[z.toString()] != null;	}			public function intersect(s:SetValue):SetValue {		var sv:SetValue = new SetValue();		for(var m:String in members) {			if(s.members[m] != null) {				sv.members[m] = members[m];				sv.ordering.push(m);			}		}		//trace(""+this+".intersect(" + s + ") = " + sv);		return sv;	}		public function union(s:SetValue):SetValue {		var sv:SetValue = clone();		for(var m:String in s.members) {			//var foo:SetValue = sv.clone();			sv.members[m] = s.members[m];			sv.ordering.push(m);			//trace(""+foo + " U " + s + " = " + sv); 		}		return sv;	}	public function addMember(z:Complex):SetValue {		var m:String = z.toString();		if(members[m] == null) {			members[m] = z;			ordering.push(z);		}		return this;	}			public function clone():SetValue {		var sv:SetValue = new SetValue();		for(var i:int=0; i < ordering.length; i++) {			var m:int = ordering[i];			sv.members[m] = members[m];			sv.ordering.push(m);		}		return sv;	}		public function get length():Number {		return ordering.length;	}		public function getItem(index:Number):Complex {		return members[ordering[index]];	}		public function toString():String {		var s:String = "";		var sep:String = "";		for(var i:int=0; i < ordering.length; i++) {			s += (sep + ordering[i]);			sep = ", ";		}		//trace("SetValue.toString = {" + s + "}");		return "("+s+")";	}}}