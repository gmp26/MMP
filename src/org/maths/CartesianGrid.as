package org.maths {	import org.maths.Complex;import org.maths.IComplexView;import flash.display.Sprite;public class CartesianGrid extends Sprite {	public var xMin:int = -10;	public var xMax:int = +10;	public var yMin:int = -10;	public var yMax:int = +10;	public var majors:int = 10;	public var middles:int = 5;	public var interval:int = 1;	// styles	public var mini:Object = {thickness:1, rgb:0xDDDDDD, alpha:100};	public var midi:Object = {thickness:2, rgb:0xCCCCCC, alpha:100};	public var maxi:Object = {thickness:3, rgb:0xBBBBBB, alpha:100};	function CartesianGrid() {	}		public function draw():void {		drawVerticals();		drawHorizontals();	}	private function drawVerticals():void {		for(var xx:int = 0, i:int=0; xx <= Math.max(Math.abs(xMax),Math.abs(xMin)); xx+= interval, i++) {			var style:Object = (i % majors==0) ? maxi : ((i % middles) == 0 ? midi : mini);			graphics.lineStyle(style.thickness, style.rgb, style.alpha);			if(xx <= xMax) {				moveTo(xx,yMin);				lineTo(xx,yMax);			}			if(-xx >= xMin) {				moveTo(-xx,yMin);				lineTo(-xx,yMax);			}		}	}	private function drawHorizontals():void {		for(var yy:int = 0, i:int=0; yy <= Math.max(Math.abs(yMax),Math.abs(yMin)); yy+= interval, i++) {			var style:Object = (i%majors==0) ? maxi : ((i%middles) == 0 ? midi : mini);			graphics.lineStyle(style.thickness, style.rgb, style.alpha);			if(yy <=yMax) {				moveTo(xMin,yy);				lineTo(xMax,yy);			}			if(-yy >= yMin) {				moveTo(xMin,-yy);				lineTo(xMax,-yy);			}		}	}	private function moveTo(xx:Number, yy:Number):void {		var g:Complex = (parent as IComplexView).complexToScreen(new Complex(xx,yy));		//trace("moveTo("+g.x+","+g.y+")");		graphics.moveTo(g.x, g.y);	}	private function lineTo(xx:Number, yy:Number):void {		try {			var g:Complex = (parent as IComplexView).complexToScreen(new Complex(xx,yy));			//trace("lineTo("+g.x+","+g.y+")");			graphics.lineTo(g.x, g.y);		}		catch (err:Error) {		}	}		private function curveTo(cx:Number, cy:Number, xx:Number, yy:Number):void {		try {			var p:IComplexView = parent as IComplexView;			if(p != null) {				var c:Complex = p.complexToScreen(new Complex(cx,cy));				var g:Complex = p.complexToScreen(new Complex(xx,yy));				graphics.curveTo(c.x, c.y, g.x, g.y);			}		}		catch (err:Error) {		}	}}}