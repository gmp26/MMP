package org.maths {import org.maths.Complex;import org.maths.IComplexView;import flash.display.Sprite;public class PolarGrid extends Sprite {		public var radius:Number = 5;	public var minorRadials:int = 30;	public var middleRadials:int = 8;	public var majorRadials:int = 2;	public var interval:int = 1;	public var middles:int = 5;	public var majors:int = 10;		// styles	public var mini:Object = {thickness:1, rgb:0xDDDDDD, alpha:100};	public var midi:Object = {thickness:2, rgb:0xCCCCCC, alpha:100};	public var maxi:Object = {thickness:3, rgb:0xBBBBBB, alpha:100};		function PolarGrid() {	}		public function draw():void {		// Draw radials		drawRadials(minorRadials, mini);		drawRadials(middleRadials, midi);		drawRadials(majorRadials, maxi);		// Draw tangentials		//trace("radius = " + radius);		drawTangentials()	}		public function drawRadials(radialCount:Number, style:Object):void {		// Draw radials		graphics.lineStyle(style.thickness, style.rgb, style.alpha);		//trace("style="+style.thickness+":"+style.rgb+":"+style.alpha);		var interval:Number = Math.PI/radialCount;		for(var i:int = 0; i < radialCount; i++) {			var a:Number = i*interval;			var rc:Number = radius*Math.cos(a);			var rs:Number = radius*Math.sin(a);			moveTo(-rc, -rs);			lineTo(rc, rs);		}	}		public function drawTangentials():void {		var intervals:Number = radius/interval;		if(intervals > 500 || isNaN(intervals)) {			trace("bad call to Tangentials: interval="+interval+" radius="+radius + " intervals="+intervals);			return;		}		for(var i:Number = 1; i < intervals; i++) {			var r:Number = interval*i;			//trace("r="+r+" interval="+interval+" i="+i);			var style:Object = (i%majors==0) ? maxi : ((i%middles) == 0 ? midi : mini);			drawCircle(r, style);		}	}		public function drawCircle(r:Number, style:Object):void {		//trace("drawCircle(r="+r+", inc="+2*Math.PI*r/5+")");		graphics.lineStyle(style.thickness, style.rgb, style.alpha);		moveTo(r,0);		var a:Number = Math.PI/4;		var br:Number = r/Math.cos(Math.PI/8);		var tr:Number = a/2;		for(var t:Number=a; t <= Math.PI*2; t += a, tr+=a) {			curveTo(br*Math.cos(tr), br*Math.sin(tr), r*Math.cos(t), r*Math.sin(t));		}	}		public function moveTo(xx:Number, yy:Number):void {		var p:IComplexView = parent as IComplexView;		var g:Complex = p.complexToScreen(new Complex(xx,yy));		//trace("moveTo("+g.x+","+g.y+")");		graphics.moveTo(g.x, g.y);	}	public function lineTo(xx:Number, yy:Number):void {		var p:IComplexView = parent as IComplexView;		var g:Complex = p.complexToScreen(new Complex(xx,yy));		//trace("lineTo("+g.x+","+g.y+")");		graphics.lineTo(g.x, g.y);	}		public function curveTo(cx:Number, cy:Number, xx:Number, yy:Number):void {		var p:IComplexView = parent as IComplexView;		var c:Complex = p.complexToScreen(new Complex(cx,cy));		var g:Complex = p.complexToScreen(new Complex(xx,yy));		graphics.curveTo(c.x, c.y, g.x, g.y);	}}}